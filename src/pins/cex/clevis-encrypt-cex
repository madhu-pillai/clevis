#!/bin/sh
#%# Legal stuff. Put your name etc. here.
#%# Of course you're not bound to GPL-3+ but it will certainly ease
#%# inclusion in upstream clevis if you use that.
# Copyright (c) 2023 Madhu Pillai
# Author: Madhu Pillai <madhu.pillai1@ibm.com> 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

#%# A one-line summary. Will be used in the help messages below.
SUMMARY='Encrypts using a IBM CCA crypto express card (cex)'

function on_exit() {
    if [ ! -d "$TMP" ] || ! rm -rf "$TMP"; then
        echo "Delete temporary files failed!" >&2
        echo "You need to clean up: $TMP" >&2
        exit 1
    fi
}


if [ "${1:-}" = '--summary' ] ; then
    echo "$SUMMARY"
    exit 0
fi

#%# Regular operation assumes output goes to a file. If not, print
#%# some usage information and bail out.
if [ -t 0 ] ; then
    exec >&2
    echo
    echo "Usage: clevis encrypt cex CONFIG < PLAINTEXT > JWE"
    echo
    echo "$SUMMARY"
    echo
    echo "This command uses the following configuration properties:"
    echo
    echo "  keybits: <string>   Specifies the size of the AES key to be generated in bits.  Valid values are 128, 192, and 256 (default: 256)"
    echo 
    echo "  key-type: <string>   Specifies  the  key  type of the secure key. Possible values are CCA-AESDATA, CCA-AESCIPHER (default: CCA-AESDATA)"
    echo
    echo "  volume-type: <string>    Specifies  the  volume  type of the associated volumes used with dm-crypt. Possible values are plain and luks2 (default: luks2)"
    echo 
    echo "  sector-size: <string>    Specifies the sector size in bytes used with dm-crypt. It must be a power of two and in the range of 512 to 4096 bytes (default: 512)"
    echo
    echo "  cipher-mode: <string>   Generates a secure AES key for the XTS cipher mode that consist of two concatenated secure keys (default: xts)"
    echo
    exit 2

fi

#Verify the paes-s390 kernel module
if ! lsmod | grep -q paes; then
    modprobe paes 
    fi
#Show Information about zcrypt devices and configuration.
if ! command -v lszcrypt > /dev/null ; then
    printf "s390x-tools not found"
    exit 1
    fi
#Verify the CEX card    
if ! command lszcrypt -V > /dev/null; then
    printf "Cex Card not found"
    exit 1
    fi

#Verify the CEX CARD present and atleast has a domain.
card_domain=$(lszcrypt --ccaonly | awk '$1 ~ /^[0-9A-Fa-f]{2}\.[0-9A-Fa-f]{4}$/ {print $1}')
if [ -z $card_domain ]; then
    printf "No Crypto domain present"
    exit 1
    fi

#%# The CONFIG parameter in $1 has to be valid JSON
if ! cfg="$(jose fmt --json="${1}" --object --output=- 2>/dev/null)" ; then
    echo 'Configuration is malformed!' >&2
    exit 1
fi

keybits="$(jose fmt -j- -Og keybits -u- <<< "$cfg")" || keybits="256"

key-type="$(jose fmt -j- -Og key-type -u- <<< "$cfg")" || key-type="CCA-AESDATA"

volume-type="$(jose fmt -j- -Og volume-type -u- <<< "$cfg")" || volume-type="luks2"

sector-size="$(jose fmt -j- -Og sector-size -u- <<< "$cfg")" || sector-size="512"

cipher-mode="$(jose fmt -j- -Og cipher-mode -u- <<< "$cfg")" || cipher-mode="xts"


mkdir -p "${TMPDIR:-/tmp/zkey}"
if ! TMP="$(mktemp -d)"; then
    echo "Creating a temporary dir for TPM files failed!" >&2
    exit 1
fi

trap 'on_exit' EXIT

#Change the default zkey repository to tmp directory
export ZKEY_REPOSITORY="/tmp/zkey"

#Generate the secure key.
zkey generate --name secure_key --keybits "${keybits}" --key-type "${key-type}" --"${cipher-mode}" --volume-type "${volume-type}" --sector-size "${sector-size}" --apqns "${card_domain}"  >&2 || fail=$?

if [ -n $fail ]; then
    echo "Creating Secure Key failed!" >&2
    exit 1
    fi

if ! skey="$(jose b64 enc -I $TMPDIR/secure_key.skey)" ; then
    echo 'Missing the required keyfile property!' >&2
    exit 1
fi

if ! jwk="$(jose jwk gen -i '{"alg":"A256GCM"}')"; then
    echo "Generating a jwk failed!" >&2
    exit 1
fi

jwe='{"protected":{"clevis":{"pin":"cex","cex":{}}}}'
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g cex -q "$skey" -s key -UUUUo-)"

# The on_exit() trap will not be fired after exec, so let's clean up the temp
# directory at this point.
[ -d "${TMP}" ] && rm -rf "${TMP}"

exec jose jwe enc -i- -k- -I- -c < <(echo -n "$jwe$jwk"; /bin/cat)
